<Application x:Class="RelinkFSMToolkit.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:RelinkFSMToolkit"
             xmlns:hc="https://handyorg.github.io/handycontrol"
             xmlns:conv="clr-namespace:Xceed.Wpf.Toolkit.Core.Converters;assembly=DotNetProjects.Wpf.Extended.Toolkit"
             xmlns:themes="clr-namespace:Xceed.Wpf.Toolkit.Themes;assembly=DotNetProjects.Wpf.Extended.Toolkit"
             xmlns:pg="clr-namespace:Xceed.Wpf.Toolkit.PropertyGrid;assembly=DotNetProjects.Wpf.Extended.Toolkit"
             xmlns:pgconv="clr-namespace:Xceed.Wpf.Toolkit.PropertyGrid.Converters;assembly=DotNetProjects.Wpf.Extended.Toolkit"
             xmlns:commands="clr-namespace:Xceed.Wpf.Toolkit.PropertyGrid.Commands;assembly=DotNetProjects.Wpf.Extended.Toolkit"
             xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit">
    <Application.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="pack://application:,,,/Nodify;component/Themes/Dark.xaml" />
                <ResourceDictionary Source="pack://application:,,,/RelinkFSMToolkit;component/Themes/Dark.xaml" />
            </ResourceDictionary.MergedDictionaries>
            <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
            <conv:InverseBoolConverter x:Key="InverseBoolConverter"/>
            <conv:HalfConverter x:Key="HalfConverter"/>
            <pgconv:ObjectToUIElementConverter x:Key="ObjectToUIElementConverter"/>
            <pgconv:IsDefaultCategoryConverter x:Key="IsDefaultCategoryConverter"/>
            <pgconv:SelectedObjectConverter x:Key="objectConverter"/>
            <Style x:Key="OptionsToggleButtonStyle" TargetType="{x:Type RadioButton}">
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="BorderBrush" Value="Transparent"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                <Setter Property="Height" Value="22"/>
                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                <Setter Property="ToolTipService.InitialShowDelay" Value="900"/>
                <Setter Property="ToolTipService.ShowDuration" Value="20000"/>
                <Setter Property="ToolTipService.BetweenShowDelay" Value="0"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type RadioButton}">
                            <Grid SnapsToDevicePixels="True">
                                <Border x:Name="OuterBorder" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="0"/>
                                <Border x:Name="MiddleBorder" Background="Transparent" BorderBrush="Transparent" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="0">
                                    <Border x:Name="InnerBorder" Background="Transparent" BorderBrush="Transparent" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="0" Padding="{TemplateBinding Padding}">
                                        <StackPanel x:Name="StackPanel" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">
                                            <ContentPresenter x:Name="Content" Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="1" VerticalAlignment="Center"/>
                                        </StackPanel>
                                    </Border>
                                </Border>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Background" TargetName="OuterBorder" Value="{DynamicResource {x:Static themes:ResourceKeys.ButtonMouseOverBackgroundKey}}"/>
                                    <Setter Property="BorderBrush" TargetName="OuterBorder" Value="{DynamicResource {x:Static themes:ResourceKeys.ButtonMouseOverOuterBorderKey}}"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Opacity" TargetName="Content" Value="0.5"/>
                                    <!--<Setter TargetName="OuterBorder" Value="#FF9E9E9E"/> Nen: Causes issues --> 
                                </Trigger>
                                <Trigger Property="IsChecked" Value="True">
                                    <Setter Property="Background" TargetName="OuterBorder" Value="{DynamicResource {x:Static themes:ResourceKeys.ButtonPressedBackgroundKey}}"/>
                                    <Setter Property="BorderBrush" TargetName="OuterBorder" Value="{DynamicResource {x:Static themes:ResourceKeys.ButtonPressedOuterBorderKey}}"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter Property="Background" TargetName="OuterBorder" Value="{DynamicResource {x:Static themes:ResourceKeys.ButtonPressedBackgroundKey}}"/>
                                    <Setter Property="BorderBrush" TargetName="OuterBorder" Value="{DynamicResource {x:Static themes:ResourceKeys.ButtonPressedOuterBorderKey}}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style x:Key="ClearFilterButtonStyle" TargetType="{x:Type Button}">
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="BorderBrush" Value="Transparent"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="Height" Value="22"/>
                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                <Setter Property="ToolTipService.InitialShowDelay" Value="900"/>
                <Setter Property="ToolTipService.ShowDuration" Value="20000"/>
                <Setter Property="ToolTipService.BetweenShowDelay" Value="0"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Grid SnapsToDevicePixels="True">
                                <Border x:Name="OuterBorder" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="0"/>
                                <Border x:Name="MiddleBorder" Background="Transparent" BorderBrush="Transparent" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="0">
                                    <Border x:Name="InnerBorder" Background="Transparent" BorderBrush="Transparent" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="0" Padding="{TemplateBinding Padding}">
                                        <StackPanel x:Name="StackPanel" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">
                                            <ContentPresenter x:Name="Content" Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="1" VerticalAlignment="Center"/>
                                        </StackPanel>
                                    </Border>
                                </Border>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Background" TargetName="OuterBorder" Value="{DynamicResource {x:Static themes:ResourceKeys.ButtonMouseOverBackgroundKey}}"/>
                                    <Setter Property="BorderBrush" TargetName="OuterBorder" Value="{DynamicResource {x:Static themes:ResourceKeys.ButtonMouseOverOuterBorderKey}}"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Opacity" TargetName="Content" Value="0.5"/>
                                    <!-- <Setter TargetName="OuterBorder" Value="#FF9E9E9E"/> Nen: Causes issues --> 
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter Property="Background" TargetName="OuterBorder" Value="{DynamicResource {x:Static themes:ResourceKeys.ButtonPressedBackgroundKey}}"/>
                                    <Setter Property="BorderBrush" TargetName="OuterBorder" Value="{DynamicResource {x:Static themes:ResourceKeys.ButtonPressedOuterBorderKey}}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <DataTemplate x:Key="DefaultCategoryGroupHeaderTemplate">
                <TextBlock Text="{Binding}"/>
            </DataTemplate>
            <SolidColorBrush x:Key="GlyphBrush" Color="Black"/>
            <ControlTemplate x:Key="ExpanderToggleButton" TargetType="{x:Type ToggleButton}">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="20"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <Rectangle x:Name="Rectangle" Fill="Transparent" Margin="0,0,0,0"/>
                    <Path x:Name="Up_Arrow" Data="F0 M 0,0 L 4,4 8,0 Z" Fill="{StaticResource GlyphBrush}" HorizontalAlignment="Center" RenderTransformOrigin="0.5,0.5" VerticalAlignment="Center">
                        <Path.RenderTransform>
                            <TransformGroup>
                                <ScaleTransform ScaleX="1" ScaleY="1"/>
                                <SkewTransform AngleY="0" AngleX="0"/>
                                <RotateTransform Angle="-90"/>
                                <TranslateTransform X="0" Y="0"/>
                            </TransformGroup>
                        </Path.RenderTransform>
                    </Path>
                    <Path x:Name="Down_Arrow" Data="F0 M 0,4 L 4,0 8,4 Z" Fill="{StaticResource GlyphBrush}" HorizontalAlignment="Center" RenderTransformOrigin="0.5,0.5" VerticalAlignment="Center" Visibility="Collapsed">
                        <Path.RenderTransform>
                            <TransformGroup>
                                <ScaleTransform ScaleX="1" ScaleY="1"/>
                                <SkewTransform AngleY="0" AngleX="0"/>
                                <RotateTransform Angle="135"/>
                                <TranslateTransform X="0" Y="0"/>
                            </TransformGroup>
                        </Path.RenderTransform>
                    </Path>
                    <ContentPresenter Grid.Column="1"/>
                </Grid>
                <ControlTemplate.Triggers>
                    <Trigger Property="IsChecked" Value="true">
                        <Setter Property="Visibility" TargetName="Down_Arrow" Value="Visible"/>
                        <Setter Property="Visibility" TargetName="Up_Arrow" Value="Collapsed"/>
                        <Setter Property="OpacityMask" TargetName="Down_Arrow" Value="#FF000000"/>
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
            <Style x:Key="ExpanderStyle" TargetType="{x:Type Expander}">
                <Setter Property="Padding" Value="0"/>
                <Setter Property="Background" Value="#FFF0F0F0"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Expander}">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition x:Name="ContentRow" Height="*"/>
                                </Grid.RowDefinitions>
                                <Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="#FFF0F0F0">
                                    <ToggleButton IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource Mode=TemplatedParent}}" OverridesDefaultStyle="True" Template="{StaticResource ExpanderToggleButton}">
                                        <ContentPresenter ContentSource="Header" TextElement.FontWeight="Bold" Margin="1" RecognizesAccessKey="True"/>
                                    </ToggleButton>
                                </Border>
                                <Border x:Name="ExpandSite" Background="{x:Static SystemColors.ControlBrush}" Padding="10 0 0 0" Grid.Row="1" Visibility="Collapsed">
                                    <Border BorderThickness="0" HorizontalAlignment="Stretch" Margin="0" Padding="0" VerticalAlignment="Stretch">
                                        <ContentPresenter Focusable="false" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                    </Border>
                                </Border>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsExpanded" Value="True">
                                    <Setter Property="Visibility" TargetName="ExpandSite" Value="Visible"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style x:Key="PropertyItemGroupContainerStyle" TargetType="{x:Type GroupItem}">
                <Style.Resources>
                    <ResourceDictionary/>
                </Style.Resources>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <Border>
                                <Expander x:Name="expander" HeaderTemplate="{Binding CategoryGroupHeaderTemplate, RelativeSource={RelativeSource AncestorType={x:Type pg:PropertyGrid}}}" Header="{Binding Name}" IsExpanded="True" Style="{StaticResource ExpanderStyle}">
                                    <ItemsPresenter/>
                                </Expander>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding Name, Converter={StaticResource IsDefaultCategoryConverter}}" Value="True"/>
                            <Condition Binding="{Binding IsMiscCategoryLabelHidden, RelativeSource={RelativeSource AncestorType={x:Type pg:PropertyGrid}}}" Value="True"/>
                        </MultiDataTrigger.Conditions>
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type GroupItem}">
                                    <ItemsPresenter/>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </MultiDataTrigger>
                </Style.Triggers>
            </Style>
            <Style x:Key="SingleDefaultCategoryItemGroupContainerStyle" TargetType="{x:Type GroupItem}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <ItemsPresenter/>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <ContextMenu x:Key="{ComponentResourceKey ResourceId=SelectedObjectAdvancedOptionsMenu, TypeInTargetAssembly={x:Type pg:PropertyGrid}}">
                <MenuItem Command="commands:PropertyItemCommands.ResetValue" CommandTarget="{Binding PlacementTarget, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}, Mode=FindAncestor}}" CommandParameter="{Binding}" Header="Reset Value"/>
            </ContextMenu>
            <pg:CategoryGroupStyleSelector x:Key="categoryGroupStyleSelector" ItemGroupStyle="{StaticResource PropertyItemGroupContainerStyle}" SingleDefaultCategoryItemGroupStyle="{StaticResource SingleDefaultCategoryItemGroupContainerStyle}"/>
            <Style x:Key="PropertyGridStyle1" TargetType="{x:Type pg:PropertyGrid}">
                <Setter Property="AdvancedOptionsMenu" Value="{StaticResource {StaticResource {ComponentResourceKey ResourceId=SelectedObjectAdvancedOptionsMenu, TypeInTargetAssembly={x:Type pg:PropertyGrid}}}}"/>
                <Setter Property="Background" Value="{DynamicResource {x:Static themes:ResourceKeys.ButtonNormalBackgroundKey}}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static themes:ResourceKeys.ControlNormalBorderKey}}"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="SelectedObjectType" Value="{Binding SelectedObject, ConverterParameter=Type, Converter={StaticResource objectConverter}, RelativeSource={RelativeSource Mode=Self}}"/>
                <Setter Property="SelectedObjectTypeName" Value="{Binding SelectedObject, ConverterParameter=TypeName, Converter={StaticResource objectConverter}, RelativeSource={RelativeSource Mode=Self}}"/>
                <Setter Property="SelectedObjectName" Value="{Binding SelectedObject, ConverterParameter=SelectedObjectName, Converter={StaticResource objectConverter}, RelativeSource={RelativeSource Mode=Self}}"/>
                <Setter Property="CategoryGroupHeaderTemplate" Value="{StaticResource DefaultCategoryGroupHeaderTemplate}"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type pg:PropertyGrid}">
                            <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                                <Grid Margin="{TemplateBinding Padding}">
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition/>
                                        <RowDefinition Height="5"/>
                                        <RowDefinition Height="Auto"/>
                                    </Grid.RowDefinitions>
                                    <StackPanel x:Name="selectObjectNamePanel" Orientation="Horizontal">
                                        <Border Background="White" BorderBrush="Black" BorderThickness="1" Height="44" Margin="6,4,0,4" Padding="2" Visibility="{Binding ShowPreview, Converter={StaticResource BooleanToVisibilityConverter}, RelativeSource={RelativeSource Mode=TemplatedParent}}" Width="44">
                                            <Rectangle>
                                                <Rectangle.Fill>
                                                    <VisualBrush Stretch="Uniform" Visual="{Binding SelectedObject, Converter={StaticResource ObjectToUIElementConverter}, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                                                </Rectangle.Fill>
                                            </Rectangle>
                                        </Border>
                                        <StackPanel Margin="6,2,6,4" Orientation="Horizontal" VerticalAlignment="Center" Visibility="{Binding ShowTitle, Converter={StaticResource BooleanToVisibilityConverter}, RelativeSource={RelativeSource Mode=TemplatedParent}}">
                                            <Grid MaxWidth="{Binding ActualWidth, ConverterParameter=17, Converter={StaticResource HalfConverter}, RelativeSource={RelativeSource Mode=TemplatedParent}}">
                                                <pg:TrimmedTextBlock TextBlock.FontWeight="Bold" Text="{TemplateBinding SelectedObjectTypeName}" TextTrimming="CharacterEllipsis"/>
                                            </Grid>
                                            <Grid MaxWidth="{Binding ActualWidth, ConverterParameter=17, Converter={StaticResource HalfConverter}, RelativeSource={RelativeSource Mode=TemplatedParent}}" Margin="5,0,0,0">
                                                <pg:TrimmedTextBlock Text="{TemplateBinding SelectedObjectName}" TextTrimming="CharacterEllipsis"/>
                                            </Grid>
                                        </StackPanel>
                                    </StackPanel>
                                    <Grid x:Name="toolsContainer" Margin="4,0,4,4" Grid.Row="1">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="*"/>
                                        </Grid.ColumnDefinitions>
                                        <Grid x:Name="sortButtonContainer" Margin="4" Visibility="{Binding ShowSortOptions, Converter={StaticResource BooleanToVisibilityConverter}, RelativeSource={RelativeSource Mode=TemplatedParent}}">
                                            <StackPanel Margin="1" Orientation="Horizontal">
                                                <RadioButton IsChecked="{Binding IsCategorized, RelativeSource={RelativeSource Mode=TemplatedParent}}" Style="{StaticResource OptionsToggleButtonStyle}" ToolTip="Categorized" VerticalAlignment="Center">
                                                    <Image Height="16" Source="pack://application:,,,/DotNetProjects.Wpf.Extended.Toolkit;component/PropertyGrid/Images/Categorize16.png"  Width="16"/>
                                                </RadioButton>
                                                <RadioButton IsChecked="{Binding IsCategorized, Converter={StaticResource InverseBoolConverter}, Mode=OneWay, RelativeSource={RelativeSource Mode=TemplatedParent}}" Style="{StaticResource OptionsToggleButtonStyle}" ToolTip="Alphabetical" VerticalAlignment="Center">
                                                    <Image Height="16" Source="pack://application:,,,/DotNetProjects.Wpf.Extended.Toolkit;component/PropertyGrid/Images/SortAscending16.png" Width="16"/>
                                                </RadioButton>
                                            </StackPanel>
                                        </Grid>
                                        <Border x:Name="searchBoxContainer" Background="White" BorderBrush="Gray" BorderThickness="1" Grid.Column="1" Margin="4,4,0,4" Visibility="{Binding ShowSearchBox, Converter={StaticResource BooleanToVisibilityConverter}, RelativeSource={RelativeSource Mode=TemplatedParent}}">
                                            <Grid>
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="*"/>
                                                    <ColumnDefinition Width="Auto"/>
                                                </Grid.ColumnDefinitions>
                                                <xctk:WatermarkTextBox x:Name="_txtFilter" Background="Transparent" BorderThickness="1" Text="{Binding Filter, RelativeSource={RelativeSource Mode=TemplatedParent}, UpdateSourceTrigger=PropertyChanged}" Watermark="{TemplateBinding FilterWatermark}">
                                                    <xctk:WatermarkTextBox.Style>
                                                        <Style TargetType="{x:Type Control}">
                                                            <Setter Property="BorderBrush" Value="Transparent"/>
                                                            <Style.Triggers>
                                                                <Trigger Property="IsMouseOver" Value="True">
                                                                    <Setter Property="BorderBrush" Value="{DynamicResource {x:Static themes:ResourceKeys.ButtonMouseOverOuterBorderKey}}"/>
                                                                </Trigger>
                                                            </Style.Triggers>
                                                        </Style>
                                                    </xctk:WatermarkTextBox.Style>
                                                </xctk:WatermarkTextBox>
                                                <Button Command="commands:PropertyGridCommands.ClearFilter" Grid.Column="1" HorizontalAlignment="Left" Style="{StaticResource ClearFilterButtonStyle}">
                                                    <Image Height="16" Source="pack://application:,,,/DotNetProjects.Wpf.Extended.Toolkit;component/PropertyGrid/Images/ClearFilter16.png" Width="16"/>
                                                </Button>
                                            </Grid>
                                        </Border>
                                    </Grid>
                                    <Grid Background="{DynamicResource BackgroundBrush}" Grid.Row="2"> <!-- Nen NOTE: This one actually controls the background. -->
                                        <pg:PropertyItemsControl x:Name="PART_PropertyItemsControl" Background="{x:Static SystemColors.ControlBrush}" ScrollViewer.CanContentScroll="True" Focusable="False" IsTabStop="False" ItemsSource="{Binding Properties, RelativeSource={RelativeSource Mode=TemplatedParent}}" ItemContainerStyle="{Binding PropertyContainerStyle, RelativeSource={RelativeSource Mode=TemplatedParent}}" VerticalAlignment="Top">
                                            <pg:PropertyItemsControl.GroupStyle>
                                                <GroupStyle ContainerStyleSelector="{StaticResource categoryGroupStyleSelector}"/>
                                            </pg:PropertyItemsControl.GroupStyle>
                                            <pg:PropertyItemsControl.ItemsPanel>
                                                <ItemsPanelTemplate>
                                                    <VirtualizingStackPanel/>
                                                </ItemsPanelTemplate>
                                            </pg:PropertyItemsControl.ItemsPanel>
                                            <pg:PropertyItemsControl.Template>
                                                <ControlTemplate>
                                                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
                                                        <ScrollViewer x:Name="ScrollBar" Focusable="False" ScrollViewer.HorizontalScrollBarVisibility="Disabled" Padding="{TemplateBinding Padding}" ScrollViewer.VerticalScrollBarVisibility="Auto">
                                                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                                        </ScrollViewer>
                                                    </Border>
                                                    <ControlTemplate.Triggers>
                                                        <DataTrigger Binding="{Binding ShowHorizontalScrollBar, RelativeSource={RelativeSource AncestorType={x:Type pg:PropertyGrid}, Mode=FindAncestor}}" Value="True">
                                                            <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" TargetName="ScrollBar" Value="Auto"/>
                                                        </DataTrigger>
                                                    </ControlTemplate.Triggers>
                                                </ControlTemplate>
                                            </pg:PropertyItemsControl.Template>
                                        </pg:PropertyItemsControl>
                                        <Thumb x:Name="PART_DragThumb" Cursor="SizeWE" HorizontalAlignment="Left" Margin="6,0,0,0" Width="5">
                                            <Thumb.Template>
                                                <ControlTemplate>
                                                    <Border Background="Transparent"/>
                                                </ControlTemplate>
                                            </Thumb.Template>
                                        </Thumb>
                                    </Grid>
                                    <GridSplitter HorizontalAlignment="Stretch" Height="3" Grid.Row="3" Visibility="{Binding ShowSummary, Converter={StaticResource BooleanToVisibilityConverter}, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                                    <StackPanel Margin="0,0,0,5" Grid.Row="4" Visibility="{Binding ShowSummary, Converter={StaticResource BooleanToVisibilityConverter}, RelativeSource={RelativeSource Mode=TemplatedParent}}">
                                        <TextBlock TextBlock.FontWeight="Bold" Padding="2 2 2 0" Text="{Binding SelectedPropertyItem.DisplayName, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                                        <TextBlock Padding="5 2 2 0" TextWrapping="WrapWithOverflow" Text="{Binding SelectedPropertyItem.Description, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                                    </StackPanel>
                                </Grid>
                            </Border>
                            <ControlTemplate.Triggers>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="Visibility" SourceName="searchBoxContainer" Value="Collapsed"/>
                                        <Condition Property="Visibility" SourceName="sortButtonContainer" Value="Collapsed"/>
                                    </MultiTrigger.Conditions>
                                    <Setter Property="Visibility" TargetName="toolsContainer" Value="Collapsed"/>
                                </MultiTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </ResourceDictionary>
    </Application.Resources>
</Application>
